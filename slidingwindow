#include <stdio.h>
#include <stdlib.h>

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {
    if (numsSize == 0 || k == 0) {
        *returnSize = 0;
        return NULL;
    }

    // Calculate the number of sliding windows
    int numWindows = numsSize - k + 1;

    // Allocate memory for the result array
    int *result = (int *)malloc(numWindows * sizeof(int));
    if (!result) {
        *returnSize = 0;
        return NULL;
    }

    // Create a deque (double-ended queue) to store indices of elements in the sliding window
    int *deque = (int *)malloc(numsSize * sizeof(int));
    int front = 0, rear = -1; // Indices for the front and rear of the deque

    for (int i = 0; i < numsSize; i++) {
        // Remove elements that are out of the current sliding window from the front of the deque
        while (front <= rear && deque[front] < i - k + 1) {
            front++;
        }

        // Remove elements that are smaller than the current element from the rear of the deque
        while (front <= rear && nums[deque[rear]] < nums[i]) {
            rear--;
        }

        // Add the current element's index to the rear of the deque
        deque[++rear] = i;

        // Calculate the maximum value for the current sliding window
        if (i >= k - 1) {
            result[i - k + 1] = nums[deque[front]];
        }
    }

    *returnSize = numWindows;
    free(deque);
    return result;
}
